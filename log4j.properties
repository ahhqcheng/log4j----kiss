#测试及开发环境的日志级别，发布到线上的时候该行注释掉
log.level=DEBUG
#线上的日志级别,发布到线上的时候去掉注释
#log.level=ERROR

# 定义了两个输出端
log4j.rootLogger = WARN, A1,A2
# 定义A1输出到控制器
log4j.appender.A1 = org.apache.log4j.ConsoleAppender
# 定义A1的布局模式为PatternLayout
log4j.appender.A1.layout = org.apache.log4j.PatternLayout
# 定义A1的输出格式 %d{yyyy-MM-dd hh:mm:ss}:%p  %c - %m%n
log4j.appender.A1.layout.ConversionPattern = %d{yyyy-MM-dd hh:mm:ss}:%p  %c - %m%n

# 定义A2输出到文件
log4j.appender.A2 = org.apache.log4j.DailyRollingFileAppender
# 定义A2要输出到哪一个文件
log4j.appender.A2.File = ${webApp.root}/WEB-INF/logs/omni.log
# 定义A2的布局模式为PatternLayout
log4j.appender.A2.layout = org.apache.log4j.PatternLayout
# 定义A2的输出格式
log4j.appender.A2.layout.ConversionPattern =%d{yyyy-MM-dd hh\:mm\:ss}\:%p  %c  - %m%n 

#全景展示的web层日志记录
log4j.logger.com.xxx.yyy.net.web = ${log.level},net_web  
#不继承根日志，这样就不会使得同样的日志在根日志文件和该日志文件都存在
log4j.additivity.com.xxx.yyy.net.web = false
log4j.appender.net_web = org.apache.log4j.DailyRollingFileAppender
log4j.appender.net_web.File = ${webApp.root}/WEB-INF/logs/net_web.log
log4j.appender.net_web.layout = org.apache.log4j.PatternLayout
log4j.appender.net_web.layout.ConversionPattern = %d{yyyy-MM-dd hh\:mm\:ss}\:%p %c  - %m%n  


#全景展示的人数logic层日志记录
log4j.logger.com.xxx.yyy.number4.business.number.logic = ${log.level},number_logic
log4j.appender.number_logic = org.apache.log4j.DailyRollingFileAppender
log4j.appender.number_logic.File = ${webApp.root}/WEB-INF/logs/number_logic.log
log4j.appender.number_logic.layout = org.apache.log4j.PatternLayout
log4j.appender.number_logic.layout.ConversionPattern = %d{yyyy-MM-dd hh\:mm\:ss}\:%p  %c - %m%n 

#全景展示的全景后台logic层日志记录
log4j.logger.com.xxx.yyy.number4.business.netview.logic = ${log.level},netview_logic
log4j.appender.netview_logic = org.apache.log4j.DailyRollingFileAppender
log4j.appender.netview_logic.File = ${webApp.root}/WEB-INF/logs/netview_logic.log
log4j.appender.netview_logic.layout = org.apache.log4j.PatternLayout
log4j.appender.netview_logic.layout.ConversionPattern = %d{yyyy-MM-dd hh\:mm\:ss}\:%p  %c - %m%n 
